package com.babble.chat.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.babble.chat.common.Constants.ResponseMessages;
import com.babble.chat.common.Constants.ResponseStatus;
import com.babble.chat.common.URLConstants;
import com.babble.chat.exception.ChatExceptionService;
import com.babble.chat.model.UserMaster;
import com.babble.chat.request.UserMasterRequest;
import com.babble.chat.response.Response;
import com.babble.chat.service.impl.UserMasterServiceImpl;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@Tag(name = "user")
@RestController
@AllArgsConstructor
@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping(URLConstants.UserURL.BASE_API)
public class UserMasterController extends BaseController{
	
	private UserMasterServiceImpl userMasterService;
	
//	==============================================
	
	@Operation(summary = "Save User", 
	           description = "This service is used for saving user.")
	@ApiResponses({
	    @ApiResponse(responseCode = "200", 
	                 description = "User saved successfully!", 
	                 content = @Content(schema = @Schema(implementation = UserMaster.class))),
	    @ApiResponse(responseCode = "422", 
	    			 description = "Invalid input provided!", 
	                 content = @Content(schema = @Schema(implementation = UserMaster.class))),
	    @ApiResponse(responseCode = "10025", 
     			 	 description = "Data saving error!", 
     			 	 content = @Content(schema = @Schema(implementation = UserMaster.class))),
	    @ApiResponse(responseCode = "500", 
     			 	 description = "Internal server error!", 
     			 	 content = @Content(schema = @Schema(implementation = UserMaster.class)))
	})
	@PostMapping(URLConstants.UserURL.SAVE_USER)
	public ResponseEntity<Response> saveUser(@Valid @RequestBody UserMasterRequest userRequest) throws ChatExceptionService {
		Response response = null;
		UserMaster user = null;
		user = userMasterService.saveUser(userRequest);
		
		if (user != null) {
			response = new Response(ResponseStatus.OK, ResponseMessages.SAVE_MESSAGE, response);
		} else {
			response = new Response(ResponseStatus.INTERNAL_SERVER_ERROR, ResponseMessages.UNABLE_TO_SAVE_MESSAGE, null);
		}
		
        return getOKResponseEntity(response);
    }
}
