package com.babble.chat.service.impl;

import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.babble.chat.model.EncryptionKeyMaster;
import com.babble.chat.repository.EncryptionKeyRepository;

import jakarta.annotation.PostConstruct;

@Service
public class AESCryptoServiceImpl {

	private static final String ALGORITHM = "AES";
	
    private static final String TRANSFORMATION = "AES";
    
    private SecretKey secretKey;
    
    @Autowired
    private EncryptionKeyRepository encryptionKeyRepository;
    
//  =========================================
    
    @PostConstruct
    public void init() throws Exception {
        this.secretKey = loadSecretKey();
        if (this.secretKey == null) {
            generateAndSaveSecretKey();
        }
    }
    
//  ===========================================
    
    private SecretKey loadSecretKey() {
        EncryptionKeyMaster keyEntity = encryptionKeyRepository.findTopByOrderByIdDesc();
        if (keyEntity != null) {
            byte[] keyBytes = keyEntity.getKeyData();
            return new SecretKeySpec(keyBytes, ALGORITHM);
        }
        return null;
    }
    
//  ===========================================
    
    private void generateAndSaveSecretKey() throws Exception {
        KeyGenerator keyGen = KeyGenerator.getInstance(ALGORITHM);
        keyGen.init(128); // Use 256 if supported
        secretKey = keyGen.generateKey();
        saveSecretKey(secretKey);
    }
    
//  ==========================================
    
    private void saveSecretKey(SecretKey secretKey) {
        EncryptionKeyMaster keyEntity = new EncryptionKeyMaster();
        keyEntity.setKeyData(secretKey.getEncoded());
        encryptionKeyRepository.save(keyEntity);
    }
    
//  ===========================================
    
    public String encrypt(String data) throws Exception {
        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedBytes = cipher.doFinal(data.getBytes());
        return Base64.getEncoder().encodeToString(encryptedBytes);
    }

//  ===========================================
    
    public String decrypt(String encryptedData) throws Exception {
        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedData));
        return new String(decryptedBytes);
    }
}
