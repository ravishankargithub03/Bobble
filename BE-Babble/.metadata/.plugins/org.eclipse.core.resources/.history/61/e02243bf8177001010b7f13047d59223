package com.babble.chat.controller;

import java.util.Set;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.babble.chat.common.Constants.ResponseMessages;
import com.babble.chat.common.Constants.ResponseStatus;
import com.babble.chat.common.URLConstants;
import com.babble.chat.exception.ChatExceptionService;
import com.babble.chat.model.GroupMaster;
import com.babble.chat.model.UserMaster;
import com.babble.chat.request.GroupMasterRequest;
import com.babble.chat.response.GroupResponse;
import com.babble.chat.response.Response;
import com.babble.chat.service.impl.GroupService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@Tag(name = "group")
@RestController
@AllArgsConstructor
@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping(URLConstants.GroupURL.BASE_API)
public class GroupController extends BaseController {

	private GroupService groupService;
	
//	===================== Save Group ========================
	
	@Operation(summary = "Save Group", 
			description = "This service is used for saving group."	)
	@ApiResponses({
		@ApiResponse(
				responseCode = "200", description = "Group created successfully!", content = @Content(schema = @Schema(implementation = UserMaster.class))	),
		@ApiResponse(
				responseCode = "422", description = "Invalid input provided!", content = @Content(schema = @Schema(implementation = UserMaster.class))	),
		@ApiResponse(
				responseCode = "10025", description = "Data saving error!", content = @Content(schema = @Schema(implementation = UserMaster.class))	),
		@ApiResponse(
				responseCode = "500", description = "Internal server error!", content = @Content(schema = @Schema(implementation = UserMaster.class))	) 
	})
	@PostMapping(URLConstants.GroupURL.SAVE_GROUP)
	public ResponseEntity<Response> saveUser(@Valid @RequestBody GroupMasterRequest groupRequest) throws ChatExceptionService {
		Response response = null;
		GroupMaster group = null;
		
		group = groupService.saveGroup(groupRequest);
		
		if (group != null) {
			response = new Response(ResponseStatus.OK, ResponseMessages.CREATED_MESSAGE, response);
		} else {
			response = new Response(ResponseStatus.INTERNAL_SERVER_ERROR, ResponseMessages.UNABLE_TO_CREATE_MESSAGE, null);
		}
		
		return getOKResponseEntity(response);
     }
	
//	======================= Get All My Group =============================
	
	@Operation(summary = "Get All Group", description = "This service is used for fetching all group based on their status and user.")
	@ApiResponses({
	    @ApiResponse(
	    		responseCode = "200", description = "Group fetched successfully", content = @Content(schema = @Schema(implementation = Response.class))	),
	    @ApiResponse(
	    		responseCode = "204", description = "No group found", content = @Content(schema = @Schema(implementation = Response.class))	)
	})	
	@GetMapping(URLConstants.GroupURL.GET_ALL_GROUP)
	public ResponseEntity<Response> getAllGroup(@PathVariable Long myNumber, @PathVariable Integer status){
		Response response = null;
		Set<GroupResponse> groupResponse = null;
		
		groupResponse = groupService.getAllGroup(myNumber, status);

		if (groupResponse != null) {
			response = new Response(ResponseStatus.OK, ResponseMessages.FETCHED_MESSAGE, groupResponse);
		} else {
			response = new Response(ResponseStatus.NO_CONTENT, ResponseMessages.DATA_NOT_AVAILABLE_MESSAGE, null);
		}
		return getOKResponseEntity(response);
	}
	
}
