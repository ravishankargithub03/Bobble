package com.babble.chat.controller;

import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.babble.chat.common.Constants.ResponseMessages;
import com.babble.chat.common.Constants.ResponseStatus;
import com.babble.chat.common.URLConstants;
import com.babble.chat.model.UserMaster;
import com.babble.chat.request.MessageMasterRequest;
import com.babble.chat.response.GroupResponse;
import com.babble.chat.response.Response;
import com.babble.chat.service.MessageMasterService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@Tag(name = "message")
@RestController
@AllArgsConstructor
@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping(URLConstants.MessageURL.BASE_API)
public class MessageController extends BaseController{
	
	private SimpMessagingTemplate messagingTemplate;
	
	private MessageMasterService messageMasterService;
	
//	=========================================================
	
	@Operation(summary = "Send Message", 
	           description = "This service is used for sending message.")
	@ApiResponses({
	    @ApiResponse(responseCode = "200", 
	                 description = "Message sent successfully!", 
	                 content = @Content(schema = @Schema(implementation = UserMaster.class))),
	    @ApiResponse(responseCode = "422", 
	    			 description = "Invalid input provided!", 
	                 content = @Content(schema = @Schema(implementation = UserMaster.class))),
	    @ApiResponse(responseCode = "10025", 
  			 		 description = "Data saving error!", 
  			 		 content = @Content(schema = @Schema(implementation = UserMaster.class))),
	    @ApiResponse(responseCode = "500", 
  			 		 description = "Internal server error!", 
  			 		 content = @Content(schema = @Schema(implementation = UserMaster.class)))
	})
//	@PostMapping(URLConstants.MessageURL.SAVE_MESSAGE)
	@MessageMapping(URLConstants.MessageURL.SAVE_MESSAGE)
	public ResponseEntity<Response> saveMessage(@Valid @RequestBody MessageMasterRequest request) throws Exception{
		Response response = null;
		Integer status = null;
		
		status = messageMasterService.saveMessage(request);
		
		messagingTemplate.convertAndSend("/topic/private." + request.getReceiverId(), request);
        messagingTemplate.convertAndSend("/topic/private." + request.getSenderId(), request);
        
		if (status != null) {
			response = new Response(ResponseStatus.OK, ResponseMessages.SENT_MESSAGE, status);
		} else {
			response = new Response(ResponseStatus.INTERNAL_SERVER_ERROR, ResponseMessages.UNABLE_SENT_MESSAGE, status);
		}
		
		return getOKResponseEntity(response);
	}
	
//	====================================================
	
	@Operation(summary = "Get All One To One Messages", 
	           description = "This service is used for fetching all one to one messages based on their status and user.")
	@ApiResponses({
	    @ApiResponse(responseCode = "200", 
	                 description = "Messages fetched successfully", 
	                 content = @Content(schema = @Schema(implementation = Response.class))),
	    @ApiResponse(responseCode = "204", 
	                 description = "No data found", 
	                 content = @Content(schema = @Schema(implementation = Response.class)))
	})	
	@GetMapping(URLConstants.MessageURL.GET_ALL_ONE_TO_ONE_MESSAGE)
	public ResponseEntity<Response> getAllOneToOneMessage(@PathVariable Long myNumber, @PathVariable Long contactNumber) throws Exception{
		Response response = null;
		List<Map<String, Object>> messageResponse = null;
		
		messageResponse = messageMasterService.getOneToOneAllMessage(myNumber, contactNumber);

		if (messageResponse != null) {
			response = new Response(ResponseStatus.OK, ResponseMessages.FETCHED_MESSAGE, messageResponse);
		} else {
			response = new Response(ResponseStatus.NO_CONTENT, ResponseMessages.DATA_NOT_AVAILABLE_MESSAGE, null);
		}
		return getOKResponseEntity(response);
	}
	
//	=====================================================
	
	@Operation(summary = "Get All Group Messages", 
	           description = "This service is used for fetching all group messages based on their status and user.")
	@ApiResponses({
	    @ApiResponse(responseCode = "200", 
	                 description = "Messages fetched successfully", 
	                 content = @Content(schema = @Schema(implementation = Response.class))),
	    @ApiResponse(responseCode = "204", 
	                 description = "No data found", 
	                 content = @Content(schema = @Schema(implementation = Response.class)))
	})	
	@GetMapping(URLConstants.MessageURL.GET_ALL_GROUP_MESSAGE)
	public ResponseEntity<Response> getGroupAllMessage(@PathVariable Long myNumber, @PathVariable Long groupId) throws Exception{
		Response response = null;
		List<Map<String, Object>> messageResponse = null;
		
		messageResponse = messageMasterService.getGroupAllMessage(myNumber, groupId);

		if (messageResponse != null) {
			response = new Response(ResponseStatus.OK, ResponseMessages.FETCHED_MESSAGE, messageResponse);
		} else {
			response = new Response(ResponseStatus.NO_CONTENT, ResponseMessages.DATA_NOT_AVAILABLE_MESSAGE, null);
		}
		return getOKResponseEntity(response);
	}
	
//	=======================================================
	
	@Operation(summary = "Get All Message By", description = "This service is used for fetching all message by based on their status.")
	@ApiResponses({
	    @ApiResponse(
	    		responseCode = "200", description = "Group fetched successfully", content = @Content(schema = @Schema(implementation = Response.class))	),
	    @ApiResponse(
	    		responseCode = "204", description = "No group found", content = @Content(schema = @Schema(implementation = Response.class))	)
	})	
	@GetMapping(URLConstants.MessageURL.GET_ALL_MESSAGE_BY)
	public ResponseEntity<Response> getAllMessageBy(@PathVariable Long myNumber){
		Response response = null;
		List<GroupResponse> messagesBY = null;
		
		messagesBY = messageMasterService.getAllMessageBy(myNumber);

		if (messagesBY != null && !messagesBY.isEmpty()) {
			response = new Response(ResponseStatus.OK, ResponseMessages.FETCHED_MESSAGE, messagesBY);
		} else {
			response = new Response(ResponseStatus.NO_CONTENT, ResponseMessages.DATA_NOT_AVAILABLE_MESSAGE, null);
		}
		return getOKResponseEntity(response);
	}
	
}
